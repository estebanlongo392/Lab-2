
Lab 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000b00  00000b94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800122  00800122  00000bb6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bb6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000be8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011eb  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000951  00000000  00000000  00001ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000956  00000000  00000000  00002844  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  0000319c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000541  00000000  00000000  0000339c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000075d  00000000  00000000  000038dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000403a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 16 03 	jmp	0x62c	; 0x62c <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e0       	ldi	r30, 0x00	; 0
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e2       	ldi	r26, 0x22	; 34
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 33       	cpi	r26, 0x38	; 56
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9b 02 	call	0x536	; 0x536 <main>
  9e:	0c 94 7e 05 	jmp	0xafc	; 0xafc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
#include "ADC.h"

void initADC(){
	
	ADMUX = 0;
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	DIDR0 |= (1 <<ADC0D);	//desabilitar el A0 como digital
  ac:	ae e7       	ldi	r26, 0x7E	; 126
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	8c 91       	ld	r24, X
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	8c 93       	st	X, r24
	DIDR0 |= (1<<ADC1D);     //desabilitar el A1 como digital
  b6:	8c 91       	ld	r24, X
  b8:	82 60       	ori	r24, 0x02	; 2
  ba:	8c 93       	st	X, r24


	//JUSTIFICACION IZQUIERDA
	ADMUX |= (1<<ADLAR);
  bc:	80 81       	ld	r24, Z
  be:	80 62       	ori	r24, 0x20	; 32
  c0:	80 83       	st	Z, r24
	//REFERENCIA INTERNA
	ADMUX |= (1<<REFS0);
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
  c8:	80 81       	ld	r24, Z
  ca:	8f 77       	andi	r24, 0x7F	; 127
  cc:	80 83       	st	Z, r24
	// HABILITAR INTERRUPCION
	ADCSRA |= (1<<ADIE);
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	88 60       	ori	r24, 0x08	; 8
  d6:	80 83       	st	Z, r24
	//PRESCALER 128
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);  //Habilitando prescaler de 16M/128 frecuencia = 125Khz
  d8:	80 81       	ld	r24, Z
  da:	87 60       	ori	r24, 0x07	; 7
  dc:	80 83       	st	Z, r24
	//HABILITAR ADC
	ADCSRA |= (1<<ADEN);
  de:	80 81       	ld	r24, Z
  e0:	80 68       	ori	r24, 0x80	; 128
  e2:	80 83       	st	Z, r24
  e4:	08 95       	ret

000000e6 <dato_a_mostrar>:
}


void dato_a_mostrar(char a)
{
	if(a & 1)				//0000 0001, el  a&1 es una operación bitwise, si el primer bit menos signfiativo es 1, la condición es verdadera
  e6:	80 ff       	sbrs	r24, 0
  e8:	04 c0       	rjmp	.+8      	; 0xf2 <dato_a_mostrar+0xc>
	PORTB |= (1<<3);
  ea:	95 b1       	in	r25, 0x05	; 5
  ec:	98 60       	ori	r25, 0x08	; 8
  ee:	95 b9       	out	0x05, r25	; 5
  f0:	03 c0       	rjmp	.+6      	; 0xf8 <dato_a_mostrar+0x12>
	else
	PORTB &= ~(1<<3);
  f2:	95 b1       	in	r25, 0x05	; 5
  f4:	97 7f       	andi	r25, 0xF7	; 247
  f6:	95 b9       	out	0x05, r25	; 5
	
	if(a & 2)			   //0000 0010, ahora verifica el segundo bit menos significativo, y si es 1, la condición es verdadera
  f8:	81 ff       	sbrs	r24, 1
  fa:	04 c0       	rjmp	.+8      	; 0x104 <dato_a_mostrar+0x1e>
	PORTB |= (1<<2);
  fc:	95 b1       	in	r25, 0x05	; 5
  fe:	94 60       	ori	r25, 0x04	; 4
 100:	95 b9       	out	0x05, r25	; 5
 102:	03 c0       	rjmp	.+6      	; 0x10a <dato_a_mostrar+0x24>
	else
	PORTB &= ~(1<<2);
 104:	95 b1       	in	r25, 0x05	; 5
 106:	9b 7f       	andi	r25, 0xFB	; 251
 108:	95 b9       	out	0x05, r25	; 5
	
	if(a & 4)				//0000 0100
 10a:	82 ff       	sbrs	r24, 2
 10c:	04 c0       	rjmp	.+8      	; 0x116 <dato_a_mostrar+0x30>
	PORTD |= (1<<PORTD2);
 10e:	9b b1       	in	r25, 0x0b	; 11
 110:	94 60       	ori	r25, 0x04	; 4
 112:	9b b9       	out	0x0b, r25	; 11
 114:	03 c0       	rjmp	.+6      	; 0x11c <dato_a_mostrar+0x36>
	else
	PORTD &= ~(1<<PORTD2);
 116:	9b b1       	in	r25, 0x0b	; 11
 118:	9b 7f       	andi	r25, 0xFB	; 251
 11a:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 8)				//0000 1000
 11c:	83 ff       	sbrs	r24, 3
 11e:	04 c0       	rjmp	.+8      	; 0x128 <dato_a_mostrar+0x42>
	PORTD |= (1<<PORTD3);
 120:	9b b1       	in	r25, 0x0b	; 11
 122:	98 60       	ori	r25, 0x08	; 8
 124:	9b b9       	out	0x0b, r25	; 11
 126:	03 c0       	rjmp	.+6      	; 0x12e <dato_a_mostrar+0x48>
	else
	PORTD &= ~(1<<PORTD3);
 128:	9b b1       	in	r25, 0x0b	; 11
 12a:	97 7f       	andi	r25, 0xF7	; 247
 12c:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 16)			    //0001 0000
 12e:	84 ff       	sbrs	r24, 4
 130:	04 c0       	rjmp	.+8      	; 0x13a <dato_a_mostrar+0x54>
	PORTD |= (1<<PORTD4);
 132:	9b b1       	in	r25, 0x0b	; 11
 134:	90 61       	ori	r25, 0x10	; 16
 136:	9b b9       	out	0x0b, r25	; 11
 138:	03 c0       	rjmp	.+6      	; 0x140 <dato_a_mostrar+0x5a>
	else
	PORTD &= ~(1<<PORTD4);
 13a:	9b b1       	in	r25, 0x0b	; 11
 13c:	9f 7e       	andi	r25, 0xEF	; 239
 13e:	9b b9       	out	0x0b, r25	; 11

	if(a & 32)			    //0010 0000
 140:	85 ff       	sbrs	r24, 5
 142:	04 c0       	rjmp	.+8      	; 0x14c <dato_a_mostrar+0x66>
	PORTD |= (1<<PORTD5);
 144:	9b b1       	in	r25, 0x0b	; 11
 146:	90 62       	ori	r25, 0x20	; 32
 148:	9b b9       	out	0x0b, r25	; 11
 14a:	03 c0       	rjmp	.+6      	; 0x152 <dato_a_mostrar+0x6c>
	else
	PORTD &= ~(1<<PORTD5);
 14c:	9b b1       	in	r25, 0x0b	; 11
 14e:	9f 7d       	andi	r25, 0xDF	; 223
 150:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 64)			   //0100 0000
 152:	86 ff       	sbrs	r24, 6
 154:	04 c0       	rjmp	.+8      	; 0x15e <dato_a_mostrar+0x78>
	PORTD |= (1<<PORTD6);
 156:	9b b1       	in	r25, 0x0b	; 11
 158:	90 64       	ori	r25, 0x40	; 64
 15a:	9b b9       	out	0x0b, r25	; 11
 15c:	03 c0       	rjmp	.+6      	; 0x164 <dato_a_mostrar+0x7e>
	else
	PORTD &= ~(1<<PORTD6);
 15e:	9b b1       	in	r25, 0x0b	; 11
 160:	9f 7b       	andi	r25, 0xBF	; 191
 162:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 128)			   //1000 0000
 164:	88 23       	and	r24, r24
 166:	24 f4       	brge	.+8      	; 0x170 <dato_a_mostrar+0x8a>
	PORTD |= (1<<PORTD7);
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	80 68       	ori	r24, 0x80	; 128
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	08 95       	ret
	else
	PORTD &= ~(1<<PORTD7);
 170:	8b b1       	in	r24, 0x0b	; 11
 172:	8f 77       	andi	r24, 0x7F	; 127
 174:	8b b9       	out	0x0b, r24	; 11
 176:	08 95       	ret

00000178 <inicio>:
	inicio(0x06);  //Comando que indica el fabricante del LCD, comenzar a almacenar en DDRAM
}

void inicio(char a)
{
	PORTB &= ~(1<<PORTB0);  //RS = 0, se le indica que es modo comando
 178:	95 b1       	in	r25, 0x05	; 5
 17a:	9e 7f       	andi	r25, 0xFE	; 254
 17c:	95 b9       	out	0x05, r25	; 5
	dato_a_mostrar(a);
 17e:	0e 94 73 00 	call	0xe6	; 0xe6 <dato_a_mostrar>
	PORTB |= (1<<PORTB1);    // E = 1, se le indica que envie los datos
 182:	85 b1       	in	r24, 0x05	; 5
 184:	82 60       	ori	r24, 0x02	; 2
 186:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 188:	8f e9       	ldi	r24, 0x9F	; 159
 18a:	9f e0       	ldi	r25, 0x0F	; 15
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <inicio+0x14>
 190:	00 c0       	rjmp	.+0      	; 0x192 <inicio+0x1a>
 192:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<PORTB1);   // E = 0,  se le indica que se cierra el envio de datos
 194:	85 b1       	in	r24, 0x05	; 5
 196:	8d 7f       	andi	r24, 0xFD	; 253
 198:	85 b9       	out	0x05, r24	; 5
 19a:	8f e9       	ldi	r24, 0x9F	; 159
 19c:	9f e0       	ldi	r25, 0x0F	; 15
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <inicio+0x26>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <inicio+0x2c>
 1a4:	00 00       	nop
 1a6:	08 95       	ret

000001a8 <Lcd_Init8bits>:
#include "LCD8bits.h"


void Lcd_Init8bits()
{
	PORTB &= ~(1<<PORTB0);   //RS = 0, se le indica que es modo comando
 1a8:	85 b1       	in	r24, 0x05	; 5
 1aa:	8e 7f       	andi	r24, 0xFE	; 254
 1ac:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<PORTB1);   //E = 0
 1ae:	85 b1       	in	r24, 0x05	; 5
 1b0:	8d 7f       	andi	r24, 0xFD	; 253
 1b2:	85 b9       	out	0x05, r24	; 5
 1b4:	2f ef       	ldi	r18, 0xFF	; 255
 1b6:	89 ef       	ldi	r24, 0xF9	; 249
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	21 50       	subi	r18, 0x01	; 1
 1bc:	80 40       	sbci	r24, 0x00	; 0
 1be:	90 40       	sbci	r25, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <Lcd_Init8bits+0x12>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <Lcd_Init8bits+0x1c>
 1c4:	00 00       	nop
	_delay_ms(20);     //Pequeños delay que indica el fabricante del LCD
	inicio(0x30);     //Comando que se repite 3 veces, que indica el fabricante de la LCD
 1c6:	80 e3       	ldi	r24, 0x30	; 48
 1c8:	0e 94 bc 00 	call	0x178	; 0x178 <inicio>
 1cc:	8f e1       	ldi	r24, 0x1F	; 31
 1ce:	9e e4       	ldi	r25, 0x4E	; 78
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <Lcd_Init8bits+0x28>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <Lcd_Init8bits+0x2e>
 1d6:	00 00       	nop
	_delay_ms(5);
	inicio(0x30);
 1d8:	80 e3       	ldi	r24, 0x30	; 48
 1da:	0e 94 bc 00 	call	0x178	; 0x178 <inicio>
 1de:	8f e1       	ldi	r24, 0x1F	; 31
 1e0:	9e e4       	ldi	r25, 0x4E	; 78
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <Lcd_Init8bits+0x3a>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <Lcd_Init8bits+0x40>
 1e8:	00 00       	nop
	_delay_ms(5);
	inicio(0x30);
 1ea:	80 e3       	ldi	r24, 0x30	; 48
 1ec:	0e 94 bc 00 	call	0x178	; 0x178 <inicio>
 1f0:	8f e3       	ldi	r24, 0x3F	; 63
 1f2:	9c e9       	ldi	r25, 0x9C	; 156
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <Lcd_Init8bits+0x4c>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <Lcd_Init8bits+0x52>
 1fa:	00 00       	nop
	_delay_ms(10);

	inicio(0x38);  //Comando que indica el fabricante del LCD, usando la matriz de 5X8
 1fc:	88 e3       	ldi	r24, 0x38	; 56
 1fe:	0e 94 bc 00 	call	0x178	; 0x178 <inicio>
	inicio(0x0C);  //Comando que indica el fabricante del LCD, display encendido
 202:	8c e0       	ldi	r24, 0x0C	; 12
 204:	0e 94 bc 00 	call	0x178	; 0x178 <inicio>
	inicio(0x01);  //Comando que indica el fabricante del LCD, Limpiar LCD
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	0e 94 bc 00 	call	0x178	; 0x178 <inicio>
	inicio(0x06);  //Comando que indica el fabricante del LCD, comenzar a almacenar en DDRAM
 20e:	86 e0       	ldi	r24, 0x06	; 6
 210:	0e 94 bc 00 	call	0x178	; 0x178 <inicio>
 214:	08 95       	ret

00000216 <Lcd_Clear>:



void Lcd_Clear()    //Limpia la pantalla LCD
{
	inicio(1);  //Comando dado por el fabricante de la LCD
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	0e 94 bc 00 	call	0x178	; 0x178 <inicio>
 21c:	08 95       	ret

0000021e <Lcd_Set_Cursor>:



void Lcd_Set_Cursor(char a, char b)
{
	if(a == 0)
 21e:	81 11       	cpse	r24, r1
 220:	05 c0       	rjmp	.+10     	; 0x22c <Lcd_Set_Cursor+0xe>
	inicio(0x80 + b);  //Posicionarse en la linea 1 y se suma la columna
 222:	80 e8       	ldi	r24, 0x80	; 128
 224:	86 0f       	add	r24, r22
 226:	0e 94 bc 00 	call	0x178	; 0x178 <inicio>
 22a:	08 95       	ret
	
	else if(a == 1)
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	21 f4       	brne	.+8      	; 0x238 <Lcd_Set_Cursor+0x1a>
	inicio(0xC0 + b);  //Posicionarse en la linea 2  y se suma la columna
 230:	80 ec       	ldi	r24, 0xC0	; 192
 232:	86 0f       	add	r24, r22
 234:	0e 94 bc 00 	call	0x178	; 0x178 <inicio>
 238:	08 95       	ret

0000023a <Lcd_Write_Char>:
}


void Lcd_Write_Char(char data)
{
	PORTB |= (1<<PORTB0);        // RS = 1, se le indica que esta en modo caracter
 23a:	95 b1       	in	r25, 0x05	; 5
 23c:	91 60       	ori	r25, 0x01	; 1
 23e:	95 b9       	out	0x05, r25	; 5
	dato_a_mostrar(data);             //Escribir el caracter
 240:	0e 94 73 00 	call	0xe6	; 0xe6 <dato_a_mostrar>
	PORTB |= (1<<PORTB1);       // E = 1, enviar el dato
 244:	85 b1       	in	r24, 0x05	; 5
 246:	82 60       	ori	r24, 0x02	; 2
 248:	85 b9       	out	0x05, r24	; 5
 24a:	8f e9       	ldi	r24, 0x9F	; 159
 24c:	9f e0       	ldi	r25, 0x0F	; 15
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <Lcd_Write_Char+0x14>
 252:	00 c0       	rjmp	.+0      	; 0x254 <Lcd_Write_Char+0x1a>
 254:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<PORTB1);    // E = 0
 256:	85 b1       	in	r24, 0x05	; 5
 258:	8d 7f       	andi	r24, 0xFD	; 253
 25a:	85 b9       	out	0x05, r24	; 5
 25c:	8f e9       	ldi	r24, 0x9F	; 159
 25e:	9f e0       	ldi	r25, 0x0F	; 15
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <Lcd_Write_Char+0x26>
 264:	00 c0       	rjmp	.+0      	; 0x266 <Lcd_Write_Char+0x2c>
 266:	00 00       	nop
 268:	08 95       	ret

0000026a <Lcd_Write_String>:
	_delay_ms(1);
}


void Lcd_Write_String(char *a) //Usando punteros, ya que, estos almacenan por ejemplo *dato = hola\0, al final siempre llevan un caracter nulo
{
 26a:	0f 93       	push	r16
 26c:	1f 93       	push	r17
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	8c 01       	movw	r16, r24
	int i;
	for(i=0; a[i]!='\0'; i++)   //Se recorre todo el puntero, hasta que el valor sea nulo
 274:	c0 e0       	ldi	r28, 0x00	; 0
 276:	d0 e0       	ldi	r29, 0x00	; 0
 278:	03 c0       	rjmp	.+6      	; 0x280 <Lcd_Write_String+0x16>
	Lcd_Write_Char(a[i]);
 27a:	0e 94 1d 01 	call	0x23a	; 0x23a <Lcd_Write_Char>


void Lcd_Write_String(char *a) //Usando punteros, ya que, estos almacenan por ejemplo *dato = hola\0, al final siempre llevan un caracter nulo
{
	int i;
	for(i=0; a[i]!='\0'; i++)   //Se recorre todo el puntero, hasta que el valor sea nulo
 27e:	21 96       	adiw	r28, 0x01	; 1
 280:	f8 01       	movw	r30, r16
 282:	ec 0f       	add	r30, r28
 284:	fd 1f       	adc	r31, r29
 286:	80 81       	ld	r24, Z
 288:	81 11       	cpse	r24, r1
 28a:	f7 cf       	rjmp	.-18     	; 0x27a <Lcd_Write_String+0x10>
	Lcd_Write_Char(a[i]);
}
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	1f 91       	pop	r17
 292:	0f 91       	pop	r16
 294:	08 95       	ret

00000296 <setup>:
void actualizarLista(char *lista, int valor);
void actualizarLCD(void);

// Configuración inicial del sistema
void setup(void) {
    cli();  // Deshabilitar interrupciones globales
 296:	f8 94       	cli

    // Configuración de puertos
    DDRD = 0xFF;  // Puerto D como salida
 298:	8f ef       	ldi	r24, 0xFF	; 255
 29a:	8a b9       	out	0x0a, r24	; 10
    DDRB = 0xFF;  // Puerto B como salida
 29c:	84 b9       	out	0x04, r24	; 4
    DDRC = 0;     // Puerto C como entrada
 29e:	17 b8       	out	0x07, r1	; 7

    // Configuración UART
    UBRR0H = (BRC >> 8);  // Configurar baud rate alto
 2a0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = BRC;         // Configurar baud rate bajo
 2a4:	87 e6       	ldi	r24, 0x67	; 103
 2a6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    UCSR0B = (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0); // Habilitar transmisión, recepción e interrupción RX
 2aa:	88 e9       	ldi	r24, 0x98	; 152
 2ac:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // Configurar formato: 8 bits de datos, 1 bit de parada
 2b0:	86 e0       	ldi	r24, 0x06	; 6
 2b2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>

    // Inicialización de LCD y ADC
    Lcd_Init8bits();  // Inicializar pantalla LCD
 2b6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <Lcd_Init8bits>
 2ba:	2f ef       	ldi	r18, 0xFF	; 255
 2bc:	80 e7       	ldi	r24, 0x70	; 112
 2be:	92 e0       	ldi	r25, 0x02	; 2
 2c0:	21 50       	subi	r18, 0x01	; 1
 2c2:	80 40       	sbci	r24, 0x00	; 0
 2c4:	90 40       	sbci	r25, 0x00	; 0
 2c6:	e1 f7       	brne	.-8      	; 0x2c0 <setup+0x2a>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <setup+0x34>
 2ca:	00 00       	nop
    _delay_ms(50);    // Esperar para asegurarse de que la LCD se inicialice correctamente
    Lcd_Clear();      // Limpiar pantalla LCD
 2cc:	0e 94 0b 01 	call	0x216	; 0x216 <Lcd_Clear>
    initADC();        // Inicializar ADC
 2d0:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
    ADCSRA |= (1 << ADSC);  // Iniciar la primera conversión ADC
 2d4:	ea e7       	ldi	r30, 0x7A	; 122
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	80 64       	ori	r24, 0x40	; 64
 2dc:	80 83       	st	Z, r24

    sei();  // Habilitar interrupciones globales
 2de:	78 94       	sei
 2e0:	08 95       	ret

000002e2 <actualizarVoltaje>:
}

// Función para convertir un valor ADC a voltaje y actualizar una cadena
void actualizarVoltaje(char *lista, uint8_t valor) {
 2e2:	8f 92       	push	r8
 2e4:	9f 92       	push	r9
 2e6:	af 92       	push	r10
 2e8:	bf 92       	push	r11
 2ea:	cf 92       	push	r12
 2ec:	df 92       	push	r13
 2ee:	ef 92       	push	r14
 2f0:	ff 92       	push	r15
 2f2:	0f 93       	push	r16
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	ec 01       	movw	r28, r24
    float voltaje = (valor * 5.0) / 255.0;
 2fc:	70 e0       	ldi	r23, 0x00	; 0
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 4e 04 	call	0x89c	; 0x89c <__floatsisf>
 306:	20 e0       	ldi	r18, 0x00	; 0
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	40 ea       	ldi	r20, 0xA0	; 160
 30c:	50 e4       	ldi	r21, 0x40	; 64
 30e:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__mulsf3>
 312:	20 e0       	ldi	r18, 0x00	; 0
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	4f e7       	ldi	r20, 0x7F	; 127
 318:	53 e4       	ldi	r21, 0x43	; 67
 31a:	0e 94 ab 03 	call	0x756	; 0x756 <__divsf3>
 31e:	4b 01       	movw	r8, r22
 320:	5c 01       	movw	r10, r24
    uint16_t int_part = (uint16_t)voltaje;
 322:	0e 94 1d 04 	call	0x83a	; 0x83a <__fixunssfsi>
 326:	6b 01       	movw	r12, r22
 328:	7c 01       	movw	r14, r24
 32a:	8b 01       	movw	r16, r22
    uint16_t dec_part = (uint16_t)((voltaje - int_part) * 100);  // Dos decimales
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 4c 04 	call	0x898	; 0x898 <__floatunsisf>
 334:	9b 01       	movw	r18, r22
 336:	ac 01       	movw	r20, r24
 338:	c5 01       	movw	r24, r10
 33a:	b4 01       	movw	r22, r8
 33c:	0e 94 3e 03 	call	0x67c	; 0x67c <__subsf3>
 340:	20 e0       	ldi	r18, 0x00	; 0
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	48 ec       	ldi	r20, 0xC8	; 200
 346:	52 e4       	ldi	r21, 0x42	; 66
 348:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__mulsf3>
 34c:	0e 94 1d 04 	call	0x83a	; 0x83a <__fixunssfsi>
 350:	4b 01       	movw	r8, r22
 352:	5c 01       	movw	r10, r24

    if (int_part < 10) {
 354:	0a 30       	cpi	r16, 0x0A	; 10
 356:	11 05       	cpc	r17, r1
 358:	40 f5       	brcc	.+80     	; 0x3aa <actualizarVoltaje+0xc8>
        lista[0] = '0' + int_part;
 35a:	80 e3       	ldi	r24, 0x30	; 48
 35c:	8c 0d       	add	r24, r12
 35e:	88 83       	st	Y, r24
        lista[1] = '.';
 360:	8e e2       	ldi	r24, 0x2E	; 46
 362:	89 83       	std	Y+1, r24	; 0x01
        lista[2] = '0' + (dec_part / 10);
 364:	94 01       	movw	r18, r8
 366:	ad ec       	ldi	r26, 0xCD	; 205
 368:	bc ec       	ldi	r27, 0xCC	; 204
 36a:	0e 94 5b 05 	call	0xab6	; 0xab6 <__umulhisi3>
 36e:	ac 01       	movw	r20, r24
 370:	56 95       	lsr	r21
 372:	47 95       	ror	r20
 374:	56 95       	lsr	r21
 376:	47 95       	ror	r20
 378:	56 95       	lsr	r21
 37a:	47 95       	ror	r20
 37c:	80 e3       	ldi	r24, 0x30	; 48
 37e:	84 0f       	add	r24, r20
 380:	8a 83       	std	Y+2, r24	; 0x02
        lista[3] = '0' + (dec_part % 10);
 382:	ca 01       	movw	r24, r20
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	44 0f       	add	r20, r20
 38a:	55 1f       	adc	r21, r21
 38c:	44 0f       	add	r20, r20
 38e:	55 1f       	adc	r21, r21
 390:	44 0f       	add	r20, r20
 392:	55 1f       	adc	r21, r21
 394:	48 0f       	add	r20, r24
 396:	59 1f       	adc	r21, r25
 398:	c4 01       	movw	r24, r8
 39a:	84 1b       	sub	r24, r20
 39c:	95 0b       	sbc	r25, r21
 39e:	80 5d       	subi	r24, 0xD0	; 208
 3a0:	8b 83       	std	Y+3, r24	; 0x03
        lista[4] = 'V';
 3a2:	86 e5       	ldi	r24, 0x56	; 86
 3a4:	8c 83       	std	Y+4, r24	; 0x04
        lista[5] = '\0';
 3a6:	1d 82       	std	Y+5, r1	; 0x05
 3a8:	41 c0       	rjmp	.+130    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
    } else {
        lista[0] = '0' + (int_part / 10);
 3aa:	96 01       	movw	r18, r12
 3ac:	ad ec       	ldi	r26, 0xCD	; 205
 3ae:	bc ec       	ldi	r27, 0xCC	; 204
 3b0:	0e 94 5b 05 	call	0xab6	; 0xab6 <__umulhisi3>
 3b4:	ac 01       	movw	r20, r24
 3b6:	56 95       	lsr	r21
 3b8:	47 95       	ror	r20
 3ba:	56 95       	lsr	r21
 3bc:	47 95       	ror	r20
 3be:	56 95       	lsr	r21
 3c0:	47 95       	ror	r20
 3c2:	80 e3       	ldi	r24, 0x30	; 48
 3c4:	84 0f       	add	r24, r20
 3c6:	88 83       	st	Y, r24
        lista[1] = '0' + (int_part % 10);
 3c8:	ca 01       	movw	r24, r20
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	44 0f       	add	r20, r20
 3d0:	55 1f       	adc	r21, r21
 3d2:	44 0f       	add	r20, r20
 3d4:	55 1f       	adc	r21, r21
 3d6:	44 0f       	add	r20, r20
 3d8:	55 1f       	adc	r21, r21
 3da:	48 0f       	add	r20, r24
 3dc:	59 1f       	adc	r21, r25
 3de:	c6 01       	movw	r24, r12
 3e0:	84 1b       	sub	r24, r20
 3e2:	95 0b       	sbc	r25, r21
 3e4:	80 5d       	subi	r24, 0xD0	; 208
 3e6:	89 83       	std	Y+1, r24	; 0x01
        lista[2] = '.';
 3e8:	8e e2       	ldi	r24, 0x2E	; 46
 3ea:	8a 83       	std	Y+2, r24	; 0x02
        lista[3] = '0' + (dec_part / 10);
 3ec:	94 01       	movw	r18, r8
 3ee:	0e 94 5b 05 	call	0xab6	; 0xab6 <__umulhisi3>
 3f2:	ac 01       	movw	r20, r24
 3f4:	56 95       	lsr	r21
 3f6:	47 95       	ror	r20
 3f8:	56 95       	lsr	r21
 3fa:	47 95       	ror	r20
 3fc:	56 95       	lsr	r21
 3fe:	47 95       	ror	r20
 400:	80 e3       	ldi	r24, 0x30	; 48
 402:	84 0f       	add	r24, r20
 404:	8b 83       	std	Y+3, r24	; 0x03
        lista[4] = '0' + (dec_part % 10);
 406:	ca 01       	movw	r24, r20
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	44 0f       	add	r20, r20
 40e:	55 1f       	adc	r21, r21
 410:	44 0f       	add	r20, r20
 412:	55 1f       	adc	r21, r21
 414:	44 0f       	add	r20, r20
 416:	55 1f       	adc	r21, r21
 418:	48 0f       	add	r20, r24
 41a:	59 1f       	adc	r21, r25
 41c:	c4 01       	movw	r24, r8
 41e:	84 1b       	sub	r24, r20
 420:	95 0b       	sbc	r25, r21
 422:	80 5d       	subi	r24, 0xD0	; 208
 424:	8c 83       	std	Y+4, r24	; 0x04
        lista[5] = 'V';
 426:	86 e5       	ldi	r24, 0x56	; 86
 428:	8d 83       	std	Y+5, r24	; 0x05
        lista[6] = '\0';
 42a:	1e 82       	std	Y+6, r1	; 0x06
    }
}
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	1f 91       	pop	r17
 432:	0f 91       	pop	r16
 434:	ff 90       	pop	r15
 436:	ef 90       	pop	r14
 438:	df 90       	pop	r13
 43a:	cf 90       	pop	r12
 43c:	bf 90       	pop	r11
 43e:	af 90       	pop	r10
 440:	9f 90       	pop	r9
 442:	8f 90       	pop	r8
 444:	08 95       	ret

00000446 <actualizarLista>:

// Función para actualizar una cadena con un valor de 3 dígitos
void actualizarLista(char *lista, int valor) {
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	fc 01       	movw	r30, r24
 44c:	9b 01       	movw	r18, r22
    lista[0] = '0' + (valor / 100);
 44e:	cb 01       	movw	r24, r22
 450:	64 e6       	ldi	r22, 0x64	; 100
 452:	70 e0       	ldi	r23, 0x00	; 0
 454:	0e 94 47 05 	call	0xa8e	; 0xa8e <__divmodhi4>
 458:	60 5d       	subi	r22, 0xD0	; 208
 45a:	60 83       	st	Z, r22
    lista[1] = '0' + ((valor / 10) % 10);
 45c:	ca e0       	ldi	r28, 0x0A	; 10
 45e:	d0 e0       	ldi	r29, 0x00	; 0
 460:	c9 01       	movw	r24, r18
 462:	be 01       	movw	r22, r28
 464:	0e 94 47 05 	call	0xa8e	; 0xa8e <__divmodhi4>
 468:	28 2f       	mov	r18, r24
 46a:	cb 01       	movw	r24, r22
 46c:	be 01       	movw	r22, r28
 46e:	0e 94 47 05 	call	0xa8e	; 0xa8e <__divmodhi4>
 472:	80 5d       	subi	r24, 0xD0	; 208
 474:	81 83       	std	Z+1, r24	; 0x01
    lista[2] = '0' + (valor % 10);
 476:	20 5d       	subi	r18, 0xD0	; 208
 478:	22 83       	std	Z+2, r18	; 0x02
    lista[3] = '\0';
 47a:	13 82       	std	Z+3, r1	; 0x03
}
 47c:	df 91       	pop	r29
 47e:	cf 91       	pop	r28
 480:	08 95       	ret

00000482 <enviarUART>:

// Función para enviar un dato por UART
void enviarUART(char data) {
    while (!(UCSR0A & (1 << UDRE0)));  // Esperar a que el buffer esté vacío
 482:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 486:	95 ff       	sbrs	r25, 5
 488:	fc cf       	rjmp	.-8      	; 0x482 <enviarUART>
    UDR0 = data;  // Enviar dato
 48a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 48e:	08 95       	ret

00000490 <enviarStringUART>:
}

// Función para enviar una cadena de caracteres por UART
void enviarStringUART(const char* str) {
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	ec 01       	movw	r28, r24
    while (*str) {
 496:	03 c0       	rjmp	.+6      	; 0x49e <enviarStringUART+0xe>
        enviarUART(*str++);
 498:	21 96       	adiw	r28, 0x01	; 1
 49a:	0e 94 41 02 	call	0x482	; 0x482 <enviarUART>
    UDR0 = data;  // Enviar dato
}

// Función para enviar una cadena de caracteres por UART
void enviarStringUART(const char* str) {
    while (*str) {
 49e:	88 81       	ld	r24, Y
 4a0:	81 11       	cpse	r24, r1
 4a2:	fa cf       	rjmp	.-12     	; 0x498 <enviarStringUART+0x8>
        enviarUART(*str++);
    }
}
 4a4:	df 91       	pop	r29
 4a6:	cf 91       	pop	r28
 4a8:	08 95       	ret

000004aa <actualizarLCD>:

// Función para actualizar la pantalla LCD
void actualizarLCD(void) {
    Lcd_Clear();  // Limpiar pantalla
 4aa:	0e 94 0b 01 	call	0x216	; 0x216 <Lcd_Clear>
    Lcd_Set_Cursor(0, 2);
 4ae:	62 e0       	ldi	r22, 0x02	; 2
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	0e 94 0f 01 	call	0x21e	; 0x21e <Lcd_Set_Cursor>
    Lcd_Write_String("S1:");  // Escribir etiqueta de Sensor 1
 4b6:	84 e0       	ldi	r24, 0x04	; 4
 4b8:	91 e0       	ldi	r25, 0x01	; 1
 4ba:	0e 94 35 01 	call	0x26a	; 0x26a <Lcd_Write_String>
    Lcd_Set_Cursor(0, 8);
 4be:	68 e0       	ldi	r22, 0x08	; 8
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	0e 94 0f 01 	call	0x21e	; 0x21e <Lcd_Set_Cursor>
    Lcd_Write_String("S2:");  // Escribir etiqueta de Sensor 2
 4c6:	88 e0       	ldi	r24, 0x08	; 8
 4c8:	91 e0       	ldi	r25, 0x01	; 1
 4ca:	0e 94 35 01 	call	0x26a	; 0x26a <Lcd_Write_String>
    Lcd_Set_Cursor(0, 13);
 4ce:	6d e0       	ldi	r22, 0x0D	; 13
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	0e 94 0f 01 	call	0x21e	; 0x21e <Lcd_Set_Cursor>
    Lcd_Write_String("S3:");  // Escribir etiqueta de Sensor 3
 4d6:	8c e0       	ldi	r24, 0x0C	; 12
 4d8:	91 e0       	ldi	r25, 0x01	; 1
 4da:	0e 94 35 01 	call	0x26a	; 0x26a <Lcd_Write_String>

    // Actualizar las cadenas con los valores actuales
    actualizarVoltaje(lista1, Val1);
 4de:	60 91 27 01 	lds	r22, 0x0127	; 0x800127 <Val1>
 4e2:	88 e2       	ldi	r24, 0x28	; 40
 4e4:	91 e0       	ldi	r25, 0x01	; 1
 4e6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <actualizarVoltaje>
    actualizarVoltaje(lista2, Val2);
 4ea:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <Val2>
 4ee:	80 e3       	ldi	r24, 0x30	; 48
 4f0:	91 e0       	ldi	r25, 0x01	; 1
 4f2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <actualizarVoltaje>
    actualizarLista(lista3, contador);
 4f6:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <contador>
 4fa:	70 e0       	ldi	r23, 0x00	; 0
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	91 e0       	ldi	r25, 0x01	; 1
 500:	0e 94 23 02 	call	0x446	; 0x446 <actualizarLista>

    // Mostrar los valores en la LCD
    Lcd_Set_Cursor(1, 1);
 504:	61 e0       	ldi	r22, 0x01	; 1
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	0e 94 0f 01 	call	0x21e	; 0x21e <Lcd_Set_Cursor>
    Lcd_Write_String(lista1);
 50c:	88 e2       	ldi	r24, 0x28	; 40
 50e:	91 e0       	ldi	r25, 0x01	; 1
 510:	0e 94 35 01 	call	0x26a	; 0x26a <Lcd_Write_String>
    Lcd_Set_Cursor(1, 7);
 514:	67 e0       	ldi	r22, 0x07	; 7
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	0e 94 0f 01 	call	0x21e	; 0x21e <Lcd_Set_Cursor>
    Lcd_Write_String(lista2);
 51c:	80 e3       	ldi	r24, 0x30	; 48
 51e:	91 e0       	ldi	r25, 0x01	; 1
 520:	0e 94 35 01 	call	0x26a	; 0x26a <Lcd_Write_String>
    Lcd_Set_Cursor(1, 13);
 524:	6d e0       	ldi	r22, 0x0D	; 13
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	0e 94 0f 01 	call	0x21e	; 0x21e <Lcd_Set_Cursor>
    Lcd_Write_String(lista3);
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	91 e0       	ldi	r25, 0x01	; 1
 530:	0e 94 35 01 	call	0x26a	; 0x26a <Lcd_Write_String>
 534:	08 95       	ret

00000536 <main>:
}

// Función principal
int main(void) {
    setup();  // Configuración inicial del sistema
 536:	0e 94 4b 01 	call	0x296	; 0x296 <setup>
    
    // Variables para guardar los valores anteriores
    uint8_t prevVal1 = 255, prevVal2 = 255, prevContador = 255;
 53a:	1f ef       	ldi	r17, 0xFF	; 255
 53c:	df ef       	ldi	r29, 0xFF	; 255
 53e:	cf ef       	ldi	r28, 0xFF	; 255

    while (1) {
        // Verificar si hay cambios en los valores del ADC o el contador
        if ((Val1 != prevVal1) || (Val2 != prevVal2) || (contador != prevContador) || updateLCD) {
 540:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <Val1>
 544:	c8 13       	cpse	r28, r24
 546:	0c c0       	rjmp	.+24     	; 0x560 <main+0x2a>
 548:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <Val2>
 54c:	d8 13       	cpse	r29, r24
 54e:	08 c0       	rjmp	.+16     	; 0x560 <main+0x2a>
 550:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <contador>
 554:	18 13       	cpse	r17, r24
 556:	04 c0       	rjmp	.+8      	; 0x560 <main+0x2a>
 558:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <updateLCD>
 55c:	88 23       	and	r24, r24
 55e:	61 f0       	breq	.+24     	; 0x578 <main+0x42>
            actualizarLCD();  // Actualizar la pantalla LCD
 560:	0e 94 55 02 	call	0x4aa	; 0x4aa <actualizarLCD>
            // Guardar los valores actuales como anteriores
            prevVal1 = Val1;
 564:	c0 91 27 01 	lds	r28, 0x0127	; 0x800127 <Val1>
            prevVal2 = Val2;
 568:	d0 91 26 01 	lds	r29, 0x0126	; 0x800126 <Val2>
            prevContador = contador;
 56c:	10 91 24 01 	lds	r17, 0x0124	; 0x800124 <contador>
            adcUpdated = 0;
 570:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__data_end>
            updateLCD = 0;
 574:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <updateLCD>
        }

        // Enviar los valores actuales por UART
        enviarStringUART("S1: ");
 578:	80 e1       	ldi	r24, 0x10	; 16
 57a:	91 e0       	ldi	r25, 0x01	; 1
 57c:	0e 94 48 02 	call	0x490	; 0x490 <enviarStringUART>
        enviarStringUART(lista1);
 580:	88 e2       	ldi	r24, 0x28	; 40
 582:	91 e0       	ldi	r25, 0x01	; 1
 584:	0e 94 48 02 	call	0x490	; 0x490 <enviarStringUART>
        enviarStringUART(" S2: ");
 588:	85 e1       	ldi	r24, 0x15	; 21
 58a:	91 e0       	ldi	r25, 0x01	; 1
 58c:	0e 94 48 02 	call	0x490	; 0x490 <enviarStringUART>
        enviarStringUART(lista2);
 590:	80 e3       	ldi	r24, 0x30	; 48
 592:	91 e0       	ldi	r25, 0x01	; 1
 594:	0e 94 48 02 	call	0x490	; 0x490 <enviarStringUART>
        enviarStringUART(" S3: ");
 598:	8b e1       	ldi	r24, 0x1B	; 27
 59a:	91 e0       	ldi	r25, 0x01	; 1
 59c:	0e 94 48 02 	call	0x490	; 0x490 <enviarStringUART>
        enviarStringUART(lista3);
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	91 e0       	ldi	r25, 0x01	; 1
 5a4:	0e 94 48 02 	call	0x490	; 0x490 <enviarStringUART>
        enviarUART('\n');
 5a8:	8a e0       	ldi	r24, 0x0A	; 10
 5aa:	0e 94 41 02 	call	0x482	; 0x482 <enviarUART>
 5ae:	2f ef       	ldi	r18, 0xFF	; 255
 5b0:	81 ee       	ldi	r24, 0xE1	; 225
 5b2:	94 e0       	ldi	r25, 0x04	; 4
 5b4:	21 50       	subi	r18, 0x01	; 1
 5b6:	80 40       	sbci	r24, 0x00	; 0
 5b8:	90 40       	sbci	r25, 0x00	; 0
 5ba:	e1 f7       	brne	.-8      	; 0x5b4 <main+0x7e>
 5bc:	00 c0       	rjmp	.+0      	; 0x5be <main+0x88>
 5be:	00 00       	nop
 5c0:	bf cf       	rjmp	.-130    	; 0x540 <main+0xa>

000005c2 <__vector_21>:
        _delay_ms(100);  // Esperar 100ms
    }
}

// Interrupción del ADC
ISR(ADC_vect) {
 5c2:	1f 92       	push	r1
 5c4:	0f 92       	push	r0
 5c6:	0f b6       	in	r0, 0x3f	; 63
 5c8:	0f 92       	push	r0
 5ca:	11 24       	eor	r1, r1
 5cc:	8f 93       	push	r24
 5ce:	ef 93       	push	r30
 5d0:	ff 93       	push	r31
    if (caso == 0) {
 5d2:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <caso>
 5d6:	81 11       	cpse	r24, r1
 5d8:	0d c0       	rjmp	.+26     	; 0x5f4 <__vector_21+0x32>
        ADMUX &= ~((1 << MUX2) | (1 << MUX1) | (1 << MUX0)); // Seleccionar canal ADC0
 5da:	ec e7       	ldi	r30, 0x7C	; 124
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	80 81       	ld	r24, Z
 5e0:	88 7f       	andi	r24, 0xF8	; 248
 5e2:	80 83       	st	Z, r24
        Val1 = ADCH;  // Leer valor alto del ADC
 5e4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 5e8:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <Val1>
        caso = 1;  // Cambiar a caso 1
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <caso>
 5f2:	0c c0       	rjmp	.+24     	; 0x60c <__vector_21+0x4a>
    } else {
        ADMUX = (ADMUX & ~((1 << MUX2) | (1 << MUX1) | (1 << MUX0))) | (1 << MUX0); // Seleccionar canal ADC1
 5f4:	ec e7       	ldi	r30, 0x7C	; 124
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	80 81       	ld	r24, Z
 5fa:	88 7f       	andi	r24, 0xF8	; 248
 5fc:	81 60       	ori	r24, 0x01	; 1
 5fe:	80 83       	st	Z, r24
        Val2 = ADCH;  // Leer valor alto del ADC
 600:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 604:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <Val2>
        caso = 0;  // Cambiar a caso 0
 608:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <caso>
    }
    ADCSRA |= (1 << ADSC);  // Iniciar la próxima conversión ADC
 60c:	ea e7       	ldi	r30, 0x7A	; 122
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	80 81       	ld	r24, Z
 612:	80 64       	ori	r24, 0x40	; 64
 614:	80 83       	st	Z, r24
    adcUpdated = 1; // Indicar que se debe actualizar la LCD
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
}
 61c:	ff 91       	pop	r31
 61e:	ef 91       	pop	r30
 620:	8f 91       	pop	r24
 622:	0f 90       	pop	r0
 624:	0f be       	out	0x3f, r0	; 63
 626:	0f 90       	pop	r0
 628:	1f 90       	pop	r1
 62a:	18 95       	reti

0000062c <__vector_18>:

// Interrupción UART para recibir datos
ISR(USART_RX_vect) {
 62c:	1f 92       	push	r1
 62e:	0f 92       	push	r0
 630:	0f b6       	in	r0, 0x3f	; 63
 632:	0f 92       	push	r0
 634:	11 24       	eor	r1, r1
 636:	8f 93       	push	r24
    char received = UDR0;  // Leer dato recibido
 638:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    if (received == '+') {
 63c:	8b 32       	cpi	r24, 0x2B	; 43
 63e:	51 f4       	brne	.+20     	; 0x654 <__vector_18+0x28>
        if (contador < 255) {
 640:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <contador>
 644:	8f 3f       	cpi	r24, 0xFF	; 255
 646:	89 f0       	breq	.+34     	; 0x66a <__vector_18+0x3e>
            contador++;  // Incrementar contador si es menor a 255
 648:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <contador>
 64c:	8f 5f       	subi	r24, 0xFF	; 255
 64e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <contador>
 652:	0b c0       	rjmp	.+22     	; 0x66a <__vector_18+0x3e>
        }
    } else if (received == '-') {
 654:	8d 32       	cpi	r24, 0x2D	; 45
 656:	49 f4       	brne	.+18     	; 0x66a <__vector_18+0x3e>
        if (contador > 0) {
 658:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <contador>
 65c:	88 23       	and	r24, r24
 65e:	29 f0       	breq	.+10     	; 0x66a <__vector_18+0x3e>
            contador--;  // Decrementar contador si es mayor a 0
 660:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <contador>
 664:	81 50       	subi	r24, 0x01	; 1
 666:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <contador>
        }
    }
    updateLCD = 1; // Indicar que se debe actualizar la LCD
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <updateLCD>
}
 670:	8f 91       	pop	r24
 672:	0f 90       	pop	r0
 674:	0f be       	out	0x3f, r0	; 63
 676:	0f 90       	pop	r0
 678:	1f 90       	pop	r1
 67a:	18 95       	reti

0000067c <__subsf3>:
 67c:	50 58       	subi	r21, 0x80	; 128

0000067e <__addsf3>:
 67e:	bb 27       	eor	r27, r27
 680:	aa 27       	eor	r26, r26
 682:	0e 94 56 03 	call	0x6ac	; 0x6ac <__addsf3x>
 686:	0c 94 a0 04 	jmp	0x940	; 0x940 <__fp_round>
 68a:	0e 94 92 04 	call	0x924	; 0x924 <__fp_pscA>
 68e:	38 f0       	brcs	.+14     	; 0x69e <__addsf3+0x20>
 690:	0e 94 99 04 	call	0x932	; 0x932 <__fp_pscB>
 694:	20 f0       	brcs	.+8      	; 0x69e <__addsf3+0x20>
 696:	39 f4       	brne	.+14     	; 0x6a6 <__addsf3+0x28>
 698:	9f 3f       	cpi	r25, 0xFF	; 255
 69a:	19 f4       	brne	.+6      	; 0x6a2 <__addsf3+0x24>
 69c:	26 f4       	brtc	.+8      	; 0x6a6 <__addsf3+0x28>
 69e:	0c 94 8f 04 	jmp	0x91e	; 0x91e <__fp_nan>
 6a2:	0e f4       	brtc	.+2      	; 0x6a6 <__addsf3+0x28>
 6a4:	e0 95       	com	r30
 6a6:	e7 fb       	bst	r30, 7
 6a8:	0c 94 89 04 	jmp	0x912	; 0x912 <__fp_inf>

000006ac <__addsf3x>:
 6ac:	e9 2f       	mov	r30, r25
 6ae:	0e 94 b1 04 	call	0x962	; 0x962 <__fp_split3>
 6b2:	58 f3       	brcs	.-42     	; 0x68a <__addsf3+0xc>
 6b4:	ba 17       	cp	r27, r26
 6b6:	62 07       	cpc	r22, r18
 6b8:	73 07       	cpc	r23, r19
 6ba:	84 07       	cpc	r24, r20
 6bc:	95 07       	cpc	r25, r21
 6be:	20 f0       	brcs	.+8      	; 0x6c8 <__addsf3x+0x1c>
 6c0:	79 f4       	brne	.+30     	; 0x6e0 <__addsf3x+0x34>
 6c2:	a6 f5       	brtc	.+104    	; 0x72c <__addsf3x+0x80>
 6c4:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__fp_zero>
 6c8:	0e f4       	brtc	.+2      	; 0x6cc <__addsf3x+0x20>
 6ca:	e0 95       	com	r30
 6cc:	0b 2e       	mov	r0, r27
 6ce:	ba 2f       	mov	r27, r26
 6d0:	a0 2d       	mov	r26, r0
 6d2:	0b 01       	movw	r0, r22
 6d4:	b9 01       	movw	r22, r18
 6d6:	90 01       	movw	r18, r0
 6d8:	0c 01       	movw	r0, r24
 6da:	ca 01       	movw	r24, r20
 6dc:	a0 01       	movw	r20, r0
 6de:	11 24       	eor	r1, r1
 6e0:	ff 27       	eor	r31, r31
 6e2:	59 1b       	sub	r21, r25
 6e4:	99 f0       	breq	.+38     	; 0x70c <__addsf3x+0x60>
 6e6:	59 3f       	cpi	r21, 0xF9	; 249
 6e8:	50 f4       	brcc	.+20     	; 0x6fe <__addsf3x+0x52>
 6ea:	50 3e       	cpi	r21, 0xE0	; 224
 6ec:	68 f1       	brcs	.+90     	; 0x748 <__addsf3x+0x9c>
 6ee:	1a 16       	cp	r1, r26
 6f0:	f0 40       	sbci	r31, 0x00	; 0
 6f2:	a2 2f       	mov	r26, r18
 6f4:	23 2f       	mov	r18, r19
 6f6:	34 2f       	mov	r19, r20
 6f8:	44 27       	eor	r20, r20
 6fa:	58 5f       	subi	r21, 0xF8	; 248
 6fc:	f3 cf       	rjmp	.-26     	; 0x6e4 <__addsf3x+0x38>
 6fe:	46 95       	lsr	r20
 700:	37 95       	ror	r19
 702:	27 95       	ror	r18
 704:	a7 95       	ror	r26
 706:	f0 40       	sbci	r31, 0x00	; 0
 708:	53 95       	inc	r21
 70a:	c9 f7       	brne	.-14     	; 0x6fe <__addsf3x+0x52>
 70c:	7e f4       	brtc	.+30     	; 0x72c <__addsf3x+0x80>
 70e:	1f 16       	cp	r1, r31
 710:	ba 0b       	sbc	r27, r26
 712:	62 0b       	sbc	r22, r18
 714:	73 0b       	sbc	r23, r19
 716:	84 0b       	sbc	r24, r20
 718:	ba f0       	brmi	.+46     	; 0x748 <__addsf3x+0x9c>
 71a:	91 50       	subi	r25, 0x01	; 1
 71c:	a1 f0       	breq	.+40     	; 0x746 <__addsf3x+0x9a>
 71e:	ff 0f       	add	r31, r31
 720:	bb 1f       	adc	r27, r27
 722:	66 1f       	adc	r22, r22
 724:	77 1f       	adc	r23, r23
 726:	88 1f       	adc	r24, r24
 728:	c2 f7       	brpl	.-16     	; 0x71a <__addsf3x+0x6e>
 72a:	0e c0       	rjmp	.+28     	; 0x748 <__addsf3x+0x9c>
 72c:	ba 0f       	add	r27, r26
 72e:	62 1f       	adc	r22, r18
 730:	73 1f       	adc	r23, r19
 732:	84 1f       	adc	r24, r20
 734:	48 f4       	brcc	.+18     	; 0x748 <__addsf3x+0x9c>
 736:	87 95       	ror	r24
 738:	77 95       	ror	r23
 73a:	67 95       	ror	r22
 73c:	b7 95       	ror	r27
 73e:	f7 95       	ror	r31
 740:	9e 3f       	cpi	r25, 0xFE	; 254
 742:	08 f0       	brcs	.+2      	; 0x746 <__addsf3x+0x9a>
 744:	b0 cf       	rjmp	.-160    	; 0x6a6 <__addsf3+0x28>
 746:	93 95       	inc	r25
 748:	88 0f       	add	r24, r24
 74a:	08 f0       	brcs	.+2      	; 0x74e <__addsf3x+0xa2>
 74c:	99 27       	eor	r25, r25
 74e:	ee 0f       	add	r30, r30
 750:	97 95       	ror	r25
 752:	87 95       	ror	r24
 754:	08 95       	ret

00000756 <__divsf3>:
 756:	0e 94 bf 03 	call	0x77e	; 0x77e <__divsf3x>
 75a:	0c 94 a0 04 	jmp	0x940	; 0x940 <__fp_round>
 75e:	0e 94 99 04 	call	0x932	; 0x932 <__fp_pscB>
 762:	58 f0       	brcs	.+22     	; 0x77a <__divsf3+0x24>
 764:	0e 94 92 04 	call	0x924	; 0x924 <__fp_pscA>
 768:	40 f0       	brcs	.+16     	; 0x77a <__divsf3+0x24>
 76a:	29 f4       	brne	.+10     	; 0x776 <__divsf3+0x20>
 76c:	5f 3f       	cpi	r21, 0xFF	; 255
 76e:	29 f0       	breq	.+10     	; 0x77a <__divsf3+0x24>
 770:	0c 94 89 04 	jmp	0x912	; 0x912 <__fp_inf>
 774:	51 11       	cpse	r21, r1
 776:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__fp_szero>
 77a:	0c 94 8f 04 	jmp	0x91e	; 0x91e <__fp_nan>

0000077e <__divsf3x>:
 77e:	0e 94 b1 04 	call	0x962	; 0x962 <__fp_split3>
 782:	68 f3       	brcs	.-38     	; 0x75e <__divsf3+0x8>

00000784 <__divsf3_pse>:
 784:	99 23       	and	r25, r25
 786:	b1 f3       	breq	.-20     	; 0x774 <__divsf3+0x1e>
 788:	55 23       	and	r21, r21
 78a:	91 f3       	breq	.-28     	; 0x770 <__divsf3+0x1a>
 78c:	95 1b       	sub	r25, r21
 78e:	55 0b       	sbc	r21, r21
 790:	bb 27       	eor	r27, r27
 792:	aa 27       	eor	r26, r26
 794:	62 17       	cp	r22, r18
 796:	73 07       	cpc	r23, r19
 798:	84 07       	cpc	r24, r20
 79a:	38 f0       	brcs	.+14     	; 0x7aa <__divsf3_pse+0x26>
 79c:	9f 5f       	subi	r25, 0xFF	; 255
 79e:	5f 4f       	sbci	r21, 0xFF	; 255
 7a0:	22 0f       	add	r18, r18
 7a2:	33 1f       	adc	r19, r19
 7a4:	44 1f       	adc	r20, r20
 7a6:	aa 1f       	adc	r26, r26
 7a8:	a9 f3       	breq	.-22     	; 0x794 <__divsf3_pse+0x10>
 7aa:	35 d0       	rcall	.+106    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 7ac:	0e 2e       	mov	r0, r30
 7ae:	3a f0       	brmi	.+14     	; 0x7be <__divsf3_pse+0x3a>
 7b0:	e0 e8       	ldi	r30, 0x80	; 128
 7b2:	32 d0       	rcall	.+100    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7b4:	91 50       	subi	r25, 0x01	; 1
 7b6:	50 40       	sbci	r21, 0x00	; 0
 7b8:	e6 95       	lsr	r30
 7ba:	00 1c       	adc	r0, r0
 7bc:	ca f7       	brpl	.-14     	; 0x7b0 <__divsf3_pse+0x2c>
 7be:	2b d0       	rcall	.+86     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 7c0:	fe 2f       	mov	r31, r30
 7c2:	29 d0       	rcall	.+82     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 7c4:	66 0f       	add	r22, r22
 7c6:	77 1f       	adc	r23, r23
 7c8:	88 1f       	adc	r24, r24
 7ca:	bb 1f       	adc	r27, r27
 7cc:	26 17       	cp	r18, r22
 7ce:	37 07       	cpc	r19, r23
 7d0:	48 07       	cpc	r20, r24
 7d2:	ab 07       	cpc	r26, r27
 7d4:	b0 e8       	ldi	r27, 0x80	; 128
 7d6:	09 f0       	breq	.+2      	; 0x7da <__divsf3_pse+0x56>
 7d8:	bb 0b       	sbc	r27, r27
 7da:	80 2d       	mov	r24, r0
 7dc:	bf 01       	movw	r22, r30
 7de:	ff 27       	eor	r31, r31
 7e0:	93 58       	subi	r25, 0x83	; 131
 7e2:	5f 4f       	sbci	r21, 0xFF	; 255
 7e4:	3a f0       	brmi	.+14     	; 0x7f4 <__divsf3_pse+0x70>
 7e6:	9e 3f       	cpi	r25, 0xFE	; 254
 7e8:	51 05       	cpc	r21, r1
 7ea:	78 f0       	brcs	.+30     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7ec:	0c 94 89 04 	jmp	0x912	; 0x912 <__fp_inf>
 7f0:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__fp_szero>
 7f4:	5f 3f       	cpi	r21, 0xFF	; 255
 7f6:	e4 f3       	brlt	.-8      	; 0x7f0 <__divsf3_pse+0x6c>
 7f8:	98 3e       	cpi	r25, 0xE8	; 232
 7fa:	d4 f3       	brlt	.-12     	; 0x7f0 <__divsf3_pse+0x6c>
 7fc:	86 95       	lsr	r24
 7fe:	77 95       	ror	r23
 800:	67 95       	ror	r22
 802:	b7 95       	ror	r27
 804:	f7 95       	ror	r31
 806:	9f 5f       	subi	r25, 0xFF	; 255
 808:	c9 f7       	brne	.-14     	; 0x7fc <__divsf3_pse+0x78>
 80a:	88 0f       	add	r24, r24
 80c:	91 1d       	adc	r25, r1
 80e:	96 95       	lsr	r25
 810:	87 95       	ror	r24
 812:	97 f9       	bld	r25, 7
 814:	08 95       	ret
 816:	e1 e0       	ldi	r30, 0x01	; 1
 818:	66 0f       	add	r22, r22
 81a:	77 1f       	adc	r23, r23
 81c:	88 1f       	adc	r24, r24
 81e:	bb 1f       	adc	r27, r27
 820:	62 17       	cp	r22, r18
 822:	73 07       	cpc	r23, r19
 824:	84 07       	cpc	r24, r20
 826:	ba 07       	cpc	r27, r26
 828:	20 f0       	brcs	.+8      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 82a:	62 1b       	sub	r22, r18
 82c:	73 0b       	sbc	r23, r19
 82e:	84 0b       	sbc	r24, r20
 830:	ba 0b       	sbc	r27, r26
 832:	ee 1f       	adc	r30, r30
 834:	88 f7       	brcc	.-30     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 836:	e0 95       	com	r30
 838:	08 95       	ret

0000083a <__fixunssfsi>:
 83a:	0e 94 b9 04 	call	0x972	; 0x972 <__fp_splitA>
 83e:	88 f0       	brcs	.+34     	; 0x862 <__fixunssfsi+0x28>
 840:	9f 57       	subi	r25, 0x7F	; 127
 842:	98 f0       	brcs	.+38     	; 0x86a <__fixunssfsi+0x30>
 844:	b9 2f       	mov	r27, r25
 846:	99 27       	eor	r25, r25
 848:	b7 51       	subi	r27, 0x17	; 23
 84a:	b0 f0       	brcs	.+44     	; 0x878 <__fixunssfsi+0x3e>
 84c:	e1 f0       	breq	.+56     	; 0x886 <__fixunssfsi+0x4c>
 84e:	66 0f       	add	r22, r22
 850:	77 1f       	adc	r23, r23
 852:	88 1f       	adc	r24, r24
 854:	99 1f       	adc	r25, r25
 856:	1a f0       	brmi	.+6      	; 0x85e <__fixunssfsi+0x24>
 858:	ba 95       	dec	r27
 85a:	c9 f7       	brne	.-14     	; 0x84e <__fixunssfsi+0x14>
 85c:	14 c0       	rjmp	.+40     	; 0x886 <__fixunssfsi+0x4c>
 85e:	b1 30       	cpi	r27, 0x01	; 1
 860:	91 f0       	breq	.+36     	; 0x886 <__fixunssfsi+0x4c>
 862:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <__fp_zero>
 866:	b1 e0       	ldi	r27, 0x01	; 1
 868:	08 95       	ret
 86a:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__fp_zero>
 86e:	67 2f       	mov	r22, r23
 870:	78 2f       	mov	r23, r24
 872:	88 27       	eor	r24, r24
 874:	b8 5f       	subi	r27, 0xF8	; 248
 876:	39 f0       	breq	.+14     	; 0x886 <__fixunssfsi+0x4c>
 878:	b9 3f       	cpi	r27, 0xF9	; 249
 87a:	cc f3       	brlt	.-14     	; 0x86e <__fixunssfsi+0x34>
 87c:	86 95       	lsr	r24
 87e:	77 95       	ror	r23
 880:	67 95       	ror	r22
 882:	b3 95       	inc	r27
 884:	d9 f7       	brne	.-10     	; 0x87c <__fixunssfsi+0x42>
 886:	3e f4       	brtc	.+14     	; 0x896 <__fixunssfsi+0x5c>
 888:	90 95       	com	r25
 88a:	80 95       	com	r24
 88c:	70 95       	com	r23
 88e:	61 95       	neg	r22
 890:	7f 4f       	sbci	r23, 0xFF	; 255
 892:	8f 4f       	sbci	r24, 0xFF	; 255
 894:	9f 4f       	sbci	r25, 0xFF	; 255
 896:	08 95       	ret

00000898 <__floatunsisf>:
 898:	e8 94       	clt
 89a:	09 c0       	rjmp	.+18     	; 0x8ae <__floatsisf+0x12>

0000089c <__floatsisf>:
 89c:	97 fb       	bst	r25, 7
 89e:	3e f4       	brtc	.+14     	; 0x8ae <__floatsisf+0x12>
 8a0:	90 95       	com	r25
 8a2:	80 95       	com	r24
 8a4:	70 95       	com	r23
 8a6:	61 95       	neg	r22
 8a8:	7f 4f       	sbci	r23, 0xFF	; 255
 8aa:	8f 4f       	sbci	r24, 0xFF	; 255
 8ac:	9f 4f       	sbci	r25, 0xFF	; 255
 8ae:	99 23       	and	r25, r25
 8b0:	a9 f0       	breq	.+42     	; 0x8dc <__floatsisf+0x40>
 8b2:	f9 2f       	mov	r31, r25
 8b4:	96 e9       	ldi	r25, 0x96	; 150
 8b6:	bb 27       	eor	r27, r27
 8b8:	93 95       	inc	r25
 8ba:	f6 95       	lsr	r31
 8bc:	87 95       	ror	r24
 8be:	77 95       	ror	r23
 8c0:	67 95       	ror	r22
 8c2:	b7 95       	ror	r27
 8c4:	f1 11       	cpse	r31, r1
 8c6:	f8 cf       	rjmp	.-16     	; 0x8b8 <__floatsisf+0x1c>
 8c8:	fa f4       	brpl	.+62     	; 0x908 <__stack+0x9>
 8ca:	bb 0f       	add	r27, r27
 8cc:	11 f4       	brne	.+4      	; 0x8d2 <__floatsisf+0x36>
 8ce:	60 ff       	sbrs	r22, 0
 8d0:	1b c0       	rjmp	.+54     	; 0x908 <__stack+0x9>
 8d2:	6f 5f       	subi	r22, 0xFF	; 255
 8d4:	7f 4f       	sbci	r23, 0xFF	; 255
 8d6:	8f 4f       	sbci	r24, 0xFF	; 255
 8d8:	9f 4f       	sbci	r25, 0xFF	; 255
 8da:	16 c0       	rjmp	.+44     	; 0x908 <__stack+0x9>
 8dc:	88 23       	and	r24, r24
 8de:	11 f0       	breq	.+4      	; 0x8e4 <__floatsisf+0x48>
 8e0:	96 e9       	ldi	r25, 0x96	; 150
 8e2:	11 c0       	rjmp	.+34     	; 0x906 <__stack+0x7>
 8e4:	77 23       	and	r23, r23
 8e6:	21 f0       	breq	.+8      	; 0x8f0 <__floatsisf+0x54>
 8e8:	9e e8       	ldi	r25, 0x8E	; 142
 8ea:	87 2f       	mov	r24, r23
 8ec:	76 2f       	mov	r23, r22
 8ee:	05 c0       	rjmp	.+10     	; 0x8fa <__floatsisf+0x5e>
 8f0:	66 23       	and	r22, r22
 8f2:	71 f0       	breq	.+28     	; 0x910 <__stack+0x11>
 8f4:	96 e8       	ldi	r25, 0x86	; 134
 8f6:	86 2f       	mov	r24, r22
 8f8:	70 e0       	ldi	r23, 0x00	; 0
 8fa:	60 e0       	ldi	r22, 0x00	; 0
 8fc:	2a f0       	brmi	.+10     	; 0x908 <__stack+0x9>
 8fe:	9a 95       	dec	r25
 900:	66 0f       	add	r22, r22
 902:	77 1f       	adc	r23, r23
 904:	88 1f       	adc	r24, r24
 906:	da f7       	brpl	.-10     	; 0x8fe <__floatsisf+0x62>
 908:	88 0f       	add	r24, r24
 90a:	96 95       	lsr	r25
 90c:	87 95       	ror	r24
 90e:	97 f9       	bld	r25, 7
 910:	08 95       	ret

00000912 <__fp_inf>:
 912:	97 f9       	bld	r25, 7
 914:	9f 67       	ori	r25, 0x7F	; 127
 916:	80 e8       	ldi	r24, 0x80	; 128
 918:	70 e0       	ldi	r23, 0x00	; 0
 91a:	60 e0       	ldi	r22, 0x00	; 0
 91c:	08 95       	ret

0000091e <__fp_nan>:
 91e:	9f ef       	ldi	r25, 0xFF	; 255
 920:	80 ec       	ldi	r24, 0xC0	; 192
 922:	08 95       	ret

00000924 <__fp_pscA>:
 924:	00 24       	eor	r0, r0
 926:	0a 94       	dec	r0
 928:	16 16       	cp	r1, r22
 92a:	17 06       	cpc	r1, r23
 92c:	18 06       	cpc	r1, r24
 92e:	09 06       	cpc	r0, r25
 930:	08 95       	ret

00000932 <__fp_pscB>:
 932:	00 24       	eor	r0, r0
 934:	0a 94       	dec	r0
 936:	12 16       	cp	r1, r18
 938:	13 06       	cpc	r1, r19
 93a:	14 06       	cpc	r1, r20
 93c:	05 06       	cpc	r0, r21
 93e:	08 95       	ret

00000940 <__fp_round>:
 940:	09 2e       	mov	r0, r25
 942:	03 94       	inc	r0
 944:	00 0c       	add	r0, r0
 946:	11 f4       	brne	.+4      	; 0x94c <__fp_round+0xc>
 948:	88 23       	and	r24, r24
 94a:	52 f0       	brmi	.+20     	; 0x960 <__fp_round+0x20>
 94c:	bb 0f       	add	r27, r27
 94e:	40 f4       	brcc	.+16     	; 0x960 <__fp_round+0x20>
 950:	bf 2b       	or	r27, r31
 952:	11 f4       	brne	.+4      	; 0x958 <__fp_round+0x18>
 954:	60 ff       	sbrs	r22, 0
 956:	04 c0       	rjmp	.+8      	; 0x960 <__fp_round+0x20>
 958:	6f 5f       	subi	r22, 0xFF	; 255
 95a:	7f 4f       	sbci	r23, 0xFF	; 255
 95c:	8f 4f       	sbci	r24, 0xFF	; 255
 95e:	9f 4f       	sbci	r25, 0xFF	; 255
 960:	08 95       	ret

00000962 <__fp_split3>:
 962:	57 fd       	sbrc	r21, 7
 964:	90 58       	subi	r25, 0x80	; 128
 966:	44 0f       	add	r20, r20
 968:	55 1f       	adc	r21, r21
 96a:	59 f0       	breq	.+22     	; 0x982 <__fp_splitA+0x10>
 96c:	5f 3f       	cpi	r21, 0xFF	; 255
 96e:	71 f0       	breq	.+28     	; 0x98c <__fp_splitA+0x1a>
 970:	47 95       	ror	r20

00000972 <__fp_splitA>:
 972:	88 0f       	add	r24, r24
 974:	97 fb       	bst	r25, 7
 976:	99 1f       	adc	r25, r25
 978:	61 f0       	breq	.+24     	; 0x992 <__fp_splitA+0x20>
 97a:	9f 3f       	cpi	r25, 0xFF	; 255
 97c:	79 f0       	breq	.+30     	; 0x99c <__fp_splitA+0x2a>
 97e:	87 95       	ror	r24
 980:	08 95       	ret
 982:	12 16       	cp	r1, r18
 984:	13 06       	cpc	r1, r19
 986:	14 06       	cpc	r1, r20
 988:	55 1f       	adc	r21, r21
 98a:	f2 cf       	rjmp	.-28     	; 0x970 <__fp_split3+0xe>
 98c:	46 95       	lsr	r20
 98e:	f1 df       	rcall	.-30     	; 0x972 <__fp_splitA>
 990:	08 c0       	rjmp	.+16     	; 0x9a2 <__fp_splitA+0x30>
 992:	16 16       	cp	r1, r22
 994:	17 06       	cpc	r1, r23
 996:	18 06       	cpc	r1, r24
 998:	99 1f       	adc	r25, r25
 99a:	f1 cf       	rjmp	.-30     	; 0x97e <__fp_splitA+0xc>
 99c:	86 95       	lsr	r24
 99e:	71 05       	cpc	r23, r1
 9a0:	61 05       	cpc	r22, r1
 9a2:	08 94       	sec
 9a4:	08 95       	ret

000009a6 <__fp_zero>:
 9a6:	e8 94       	clt

000009a8 <__fp_szero>:
 9a8:	bb 27       	eor	r27, r27
 9aa:	66 27       	eor	r22, r22
 9ac:	77 27       	eor	r23, r23
 9ae:	cb 01       	movw	r24, r22
 9b0:	97 f9       	bld	r25, 7
 9b2:	08 95       	ret

000009b4 <__mulsf3>:
 9b4:	0e 94 ed 04 	call	0x9da	; 0x9da <__mulsf3x>
 9b8:	0c 94 a0 04 	jmp	0x940	; 0x940 <__fp_round>
 9bc:	0e 94 92 04 	call	0x924	; 0x924 <__fp_pscA>
 9c0:	38 f0       	brcs	.+14     	; 0x9d0 <__mulsf3+0x1c>
 9c2:	0e 94 99 04 	call	0x932	; 0x932 <__fp_pscB>
 9c6:	20 f0       	brcs	.+8      	; 0x9d0 <__mulsf3+0x1c>
 9c8:	95 23       	and	r25, r21
 9ca:	11 f0       	breq	.+4      	; 0x9d0 <__mulsf3+0x1c>
 9cc:	0c 94 89 04 	jmp	0x912	; 0x912 <__fp_inf>
 9d0:	0c 94 8f 04 	jmp	0x91e	; 0x91e <__fp_nan>
 9d4:	11 24       	eor	r1, r1
 9d6:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__fp_szero>

000009da <__mulsf3x>:
 9da:	0e 94 b1 04 	call	0x962	; 0x962 <__fp_split3>
 9de:	70 f3       	brcs	.-36     	; 0x9bc <__mulsf3+0x8>

000009e0 <__mulsf3_pse>:
 9e0:	95 9f       	mul	r25, r21
 9e2:	c1 f3       	breq	.-16     	; 0x9d4 <__mulsf3+0x20>
 9e4:	95 0f       	add	r25, r21
 9e6:	50 e0       	ldi	r21, 0x00	; 0
 9e8:	55 1f       	adc	r21, r21
 9ea:	62 9f       	mul	r22, r18
 9ec:	f0 01       	movw	r30, r0
 9ee:	72 9f       	mul	r23, r18
 9f0:	bb 27       	eor	r27, r27
 9f2:	f0 0d       	add	r31, r0
 9f4:	b1 1d       	adc	r27, r1
 9f6:	63 9f       	mul	r22, r19
 9f8:	aa 27       	eor	r26, r26
 9fa:	f0 0d       	add	r31, r0
 9fc:	b1 1d       	adc	r27, r1
 9fe:	aa 1f       	adc	r26, r26
 a00:	64 9f       	mul	r22, r20
 a02:	66 27       	eor	r22, r22
 a04:	b0 0d       	add	r27, r0
 a06:	a1 1d       	adc	r26, r1
 a08:	66 1f       	adc	r22, r22
 a0a:	82 9f       	mul	r24, r18
 a0c:	22 27       	eor	r18, r18
 a0e:	b0 0d       	add	r27, r0
 a10:	a1 1d       	adc	r26, r1
 a12:	62 1f       	adc	r22, r18
 a14:	73 9f       	mul	r23, r19
 a16:	b0 0d       	add	r27, r0
 a18:	a1 1d       	adc	r26, r1
 a1a:	62 1f       	adc	r22, r18
 a1c:	83 9f       	mul	r24, r19
 a1e:	a0 0d       	add	r26, r0
 a20:	61 1d       	adc	r22, r1
 a22:	22 1f       	adc	r18, r18
 a24:	74 9f       	mul	r23, r20
 a26:	33 27       	eor	r19, r19
 a28:	a0 0d       	add	r26, r0
 a2a:	61 1d       	adc	r22, r1
 a2c:	23 1f       	adc	r18, r19
 a2e:	84 9f       	mul	r24, r20
 a30:	60 0d       	add	r22, r0
 a32:	21 1d       	adc	r18, r1
 a34:	82 2f       	mov	r24, r18
 a36:	76 2f       	mov	r23, r22
 a38:	6a 2f       	mov	r22, r26
 a3a:	11 24       	eor	r1, r1
 a3c:	9f 57       	subi	r25, 0x7F	; 127
 a3e:	50 40       	sbci	r21, 0x00	; 0
 a40:	9a f0       	brmi	.+38     	; 0xa68 <__mulsf3_pse+0x88>
 a42:	f1 f0       	breq	.+60     	; 0xa80 <__mulsf3_pse+0xa0>
 a44:	88 23       	and	r24, r24
 a46:	4a f0       	brmi	.+18     	; 0xa5a <__mulsf3_pse+0x7a>
 a48:	ee 0f       	add	r30, r30
 a4a:	ff 1f       	adc	r31, r31
 a4c:	bb 1f       	adc	r27, r27
 a4e:	66 1f       	adc	r22, r22
 a50:	77 1f       	adc	r23, r23
 a52:	88 1f       	adc	r24, r24
 a54:	91 50       	subi	r25, 0x01	; 1
 a56:	50 40       	sbci	r21, 0x00	; 0
 a58:	a9 f7       	brne	.-22     	; 0xa44 <__mulsf3_pse+0x64>
 a5a:	9e 3f       	cpi	r25, 0xFE	; 254
 a5c:	51 05       	cpc	r21, r1
 a5e:	80 f0       	brcs	.+32     	; 0xa80 <__mulsf3_pse+0xa0>
 a60:	0c 94 89 04 	jmp	0x912	; 0x912 <__fp_inf>
 a64:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__fp_szero>
 a68:	5f 3f       	cpi	r21, 0xFF	; 255
 a6a:	e4 f3       	brlt	.-8      	; 0xa64 <__mulsf3_pse+0x84>
 a6c:	98 3e       	cpi	r25, 0xE8	; 232
 a6e:	d4 f3       	brlt	.-12     	; 0xa64 <__mulsf3_pse+0x84>
 a70:	86 95       	lsr	r24
 a72:	77 95       	ror	r23
 a74:	67 95       	ror	r22
 a76:	b7 95       	ror	r27
 a78:	f7 95       	ror	r31
 a7a:	e7 95       	ror	r30
 a7c:	9f 5f       	subi	r25, 0xFF	; 255
 a7e:	c1 f7       	brne	.-16     	; 0xa70 <__mulsf3_pse+0x90>
 a80:	fe 2b       	or	r31, r30
 a82:	88 0f       	add	r24, r24
 a84:	91 1d       	adc	r25, r1
 a86:	96 95       	lsr	r25
 a88:	87 95       	ror	r24
 a8a:	97 f9       	bld	r25, 7
 a8c:	08 95       	ret

00000a8e <__divmodhi4>:
 a8e:	97 fb       	bst	r25, 7
 a90:	07 2e       	mov	r0, r23
 a92:	16 f4       	brtc	.+4      	; 0xa98 <__divmodhi4+0xa>
 a94:	00 94       	com	r0
 a96:	07 d0       	rcall	.+14     	; 0xaa6 <__divmodhi4_neg1>
 a98:	77 fd       	sbrc	r23, 7
 a9a:	09 d0       	rcall	.+18     	; 0xaae <__divmodhi4_neg2>
 a9c:	0e 94 6a 05 	call	0xad4	; 0xad4 <__udivmodhi4>
 aa0:	07 fc       	sbrc	r0, 7
 aa2:	05 d0       	rcall	.+10     	; 0xaae <__divmodhi4_neg2>
 aa4:	3e f4       	brtc	.+14     	; 0xab4 <__divmodhi4_exit>

00000aa6 <__divmodhi4_neg1>:
 aa6:	90 95       	com	r25
 aa8:	81 95       	neg	r24
 aaa:	9f 4f       	sbci	r25, 0xFF	; 255
 aac:	08 95       	ret

00000aae <__divmodhi4_neg2>:
 aae:	70 95       	com	r23
 ab0:	61 95       	neg	r22
 ab2:	7f 4f       	sbci	r23, 0xFF	; 255

00000ab4 <__divmodhi4_exit>:
 ab4:	08 95       	ret

00000ab6 <__umulhisi3>:
 ab6:	a2 9f       	mul	r26, r18
 ab8:	b0 01       	movw	r22, r0
 aba:	b3 9f       	mul	r27, r19
 abc:	c0 01       	movw	r24, r0
 abe:	a3 9f       	mul	r26, r19
 ac0:	70 0d       	add	r23, r0
 ac2:	81 1d       	adc	r24, r1
 ac4:	11 24       	eor	r1, r1
 ac6:	91 1d       	adc	r25, r1
 ac8:	b2 9f       	mul	r27, r18
 aca:	70 0d       	add	r23, r0
 acc:	81 1d       	adc	r24, r1
 ace:	11 24       	eor	r1, r1
 ad0:	91 1d       	adc	r25, r1
 ad2:	08 95       	ret

00000ad4 <__udivmodhi4>:
 ad4:	aa 1b       	sub	r26, r26
 ad6:	bb 1b       	sub	r27, r27
 ad8:	51 e1       	ldi	r21, 0x11	; 17
 ada:	07 c0       	rjmp	.+14     	; 0xaea <__udivmodhi4_ep>

00000adc <__udivmodhi4_loop>:
 adc:	aa 1f       	adc	r26, r26
 ade:	bb 1f       	adc	r27, r27
 ae0:	a6 17       	cp	r26, r22
 ae2:	b7 07       	cpc	r27, r23
 ae4:	10 f0       	brcs	.+4      	; 0xaea <__udivmodhi4_ep>
 ae6:	a6 1b       	sub	r26, r22
 ae8:	b7 0b       	sbc	r27, r23

00000aea <__udivmodhi4_ep>:
 aea:	88 1f       	adc	r24, r24
 aec:	99 1f       	adc	r25, r25
 aee:	5a 95       	dec	r21
 af0:	a9 f7       	brne	.-22     	; 0xadc <__udivmodhi4_loop>
 af2:	80 95       	com	r24
 af4:	90 95       	com	r25
 af6:	bc 01       	movw	r22, r24
 af8:	cd 01       	movw	r24, r26
 afa:	08 95       	ret

00000afc <_exit>:
 afc:	f8 94       	cli

00000afe <__stop_program>:
 afe:	ff cf       	rjmp	.-2      	; 0xafe <__stop_program>
